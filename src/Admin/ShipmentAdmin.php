<?php


namespace App\Admin;

use App\Entity\Distributor;
use App\Entity\Recycler;
use App\Entity\Shipment;
use App\Entity\User;
use App\Enum\RoleEnum;
use Doctrine\ORM\Query\Expr\Join;
use Knp\Menu\ItemInterface;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Admin\AdminInterface;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Datagrid\ProxyQueryInterface;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Form\Type\ChoiceFieldMaskType;
use Sonata\AdminBundle\Form\Type\ModelType;
use Sonata\AdminBundle\Route\RouteCollectionInterface;
use Sonata\AdminBundle\Show\ShowMapper;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;

/**
 * Class ShipmentAdmin
 * @package App\Admin
 * @property $tokenStorage
 */
class ShipmentAdmin extends AbstractAdmin
{
    protected function configureFormFields(FormMapper $form): void
    {
        parent::configureFormFields($form); // TODO: Change the autogenerated stub
        /** @var Shipment $shipment */
        $shipment = $this->getSubject();

        /** @var User $user */
        $user = $this->tokenStorage->getToken()->getUser();

        if (!in_array(RoleEnum::ROLE_SUPER_ADMIN, $user->getRoles(), true)
            && in_array(RoleEnum::ROLE_MANUFACTURER, $user->getRoles(), true)) {
            $manufacturer = $user->getManufacturer();

            $form
                ->add('battery', ModelType::class, [
                    'property' => 'serialNumber',
                    'btn_add' => false,
                    'multiple' => true,
                    'required' => true,
                    'choices' => $manufacturer->getBatteries()->toArray(),
                    'mapped' => false,
                ]);
            $form
                ->add('status', ChoiceType::class, [
                    'choices' => [
                        'Registered' => 'registered',
                        'Block Chain Secured' => 'blockchain-secured',
                        'Shipped' => 'shipped',
                        'Returned' => 'returned',
                    ],
                    'mapped' => false
                ]);
        }
    }

    /**
     * @param ListMapper $list
     */
    protected function configureListFields(ListMapper $list): void
    {
        parent::configureListFields($list); // TODO: Change the autogenerated
        $list
            ->addIdentifier('battery.serialNumber')
            ->addIdentifier('address')
            ->addIdentifier('city')
            ->addIdentifier('country');
    }

    /**
     * @param ProxyQueryInterface $query
     * @return ProxyQueryInterface
     */
    protected function configureQuery(ProxyQueryInterface $query): ProxyQueryInterface
    {
        $query = parent::configureQuery($query);
        $user = $this->tokenStorage->getToken()->getUser();

        if (!in_array(RoleEnum::ROLE_SUPER_ADMIN, $user->getRoles(), true)) {
            $rootAlias = current($query->getRootAliases());
            $query->andWhere(
                $query->expr()->eq($rootAlias . '.shipmentFrom', $user->getId())
            );
        }

        return $query;
    }

    /**
     * @param DatagridMapper $filter
     */
    protected function configureDatagridFilters(DatagridMapper $filter): void
    {
        parent::configureDatagridFilters($filter); // TODO: Change the autogenerated stub
        $filter->add('battery.serialNumber');
    }

    /**
     * @param ShowMapper $show
     */
    protected function configureShowFields(ShowMapper $show): void
    {
        parent::configureShowFields($show); // TODO: Change the autogenerated stub
        $show
            ->add('battery.serialNumber')
            ->add('address')
            ->add('city')
            ->add('country');
    }

    /**
     * @param $tokenStorage
     */
    public function setTokenStorage($tokenStorage)
    {
        $this->tokenStorage = $tokenStorage;
    }

    /**
     * @param object $object
     */
    protected function prePersist(object $object): void
    {
        parent::prePersist($object); // TODO: Change the autogenerated stub

        $object->setUpdated(new \DateTime('now'));

        if ($object->getCreated() === null) {
            $object->setCreated(new \DateTime('now'));
        }
    }

    /**
     * @param array $actions
     * @return array
     */
    protected function configureBatchActions(array $actions): array
    {
        unset($actions['delete']);
        return parent::configureBatchActions($actions); // TODO: Change the autogenerated stub
    }

    protected function configureRoutes(RouteCollectionInterface $collection): void
    {
        $collection->remove('create');
        $collection->add('shipment');
        $collection->remove('delete');
        $collection->remove('edit');
    }

    /**
     * @param array $actions
     * @return array
     */
    protected function configureDashboardActions(array $actions): array
    {
        $user = $this->tokenStorage->getToken()->getUser();

        if (!in_array(RoleEnum::ROLE_SUPER_ADMIN, $user->getRoles(), true)
            && in_array(RoleEnum::ROLE_MANUFACTURER, $user->getRoles(), true)) {
            $actions['shipment'] = [
                'label' => 'Add Delivery',
                'translation_domain' => 'SonataAdminBundle',
                'url' => $this->generateUrl('shipment'),
                'icon' => 'fa fa-plus',
            ];
        }

        return $actions;
    }
}