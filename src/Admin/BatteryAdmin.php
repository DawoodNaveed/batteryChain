<?php

namespace App\Admin;

use App\Entity\Battery;
use App\Enum\RoleEnum;
use App\Helper\CustomHelper;
use App\Service\ShipmentService;
use App\Service\TransactionLogService;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Datagrid\ProxyQueryInterface;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Form\Type\ChoiceFieldMaskType;
use Sonata\AdminBundle\Form\Type\ModelType;
use Sonata\AdminBundle\Route\RouteCollectionInterface;
use Sonata\AdminBundle\Show\ShowMapper;
use Sonata\DoctrineORMAdminBundle\Filter\DateTimeRangeFilter;
use Sonata\Form\Type\DateRangePickerType;
use Sonata\Form\Type\DateRangeType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\TextType;

/**
 * Class BatteryAdmin
 * @package App\Admin
 * @property $tokenStorage
 * @property TransactionLogService transactionLogService
 * @property ShipmentService shipmentService
 */
class BatteryAdmin extends AbstractAdmin
{
    protected function configureFormFields(FormMapper $form): void
    {
        parent::configureFormFields($form); // TODO: Change the autogenerated stub
        /** @var Battery $battery */
        $battery = $this->getSubject();
        $disabled = false;

        if ($battery->getId() !== null && $battery->getStatus() !== CustomHelper::BATTERY_STATUS_PRE_REGISTERED) {
            $disabled = true;
        }

        $user = $this->tokenStorage->getToken()->getUser();

        if (in_array(RoleEnum::ROLE_SUPER_ADMIN, $user->getRoles(), true) ||
            in_array(RoleEnum::ROLE_ADMIN, $user->getRoles(), true)) {
            $form
                ->add('manufacturer', ModelType::class, [
                    'property' => 'name',
                    'btn_add' => false,
                    'disabled' => $disabled
            ]);
        }

        $form
            ->add('serialNumber', TextType::class, [
                'disabled' => $disabled
            ])
            ->add('batteryType', ModelType::class, [
                'property' => 'type',
                'btn_add' => false,
                'disabled' => $disabled
            ])
            ->add('cellType', TextType::class, [
                'required' => false,
                'disabled' => $disabled
            ])
            ->add('moduleType', TextType::class, [
                'required' => false,
                'disabled' => $disabled
            ])
            ->add('trayNumber', TextType::class, [
                'disabled' => $disabled
            ])
            ->add('productionDate', DateTimeType::class, [
                'widget' => 'single_text',
                'required' => false,
                'disabled' => $disabled
            ])
            ->add('nominalVoltage', null, [
                'required' => true,
                'disabled' => $disabled,
                'invalid_message' => "This value '{{ value }}' should be of type number."
            ])
            ->add('nominalCapacity', null, [
                'required' => true,
                'disabled' => $disabled,
                'invalid_message' => "This value '{{ value }}' should be of type number."
            ])
            ->add('nominalEnergy', null, [
                'required' => true,
                'disabled' => $disabled,
                'invalid_message' => "This value '{{ value }}' should be of type number."
            ])
            ->add('acidVolume', null, [
                'required' => true,
                'invalid_message' => "This value '{{ value }}' should be of type number.",
                'disabled' => $disabled
            ])
            ->add('co2', null, [
                'label' => 'CO2',
                'required' => true,
                'invalid_message' => "This value '{{ value }}' should be of type number.",
                'disabled' => $disabled
            ])
            ->add('height', null, [
                'required' => true,
                'disabled' => $disabled,
                'invalid_message' => "This value '{{ value }}' should be of type number."
            ])
            ->add('width', null, [
                'required' => true,
                'disabled' => $disabled,
                'invalid_message' => "This value '{{ value }}' should be of type number."
            ])
            ->add('length', null, [
                'required' => true,
                'disabled' => $disabled,
                'invalid_message' => "This value '{{ value }}' should be of type number."
            ])
            ->add('mass', null, [
                'required' => true,
                'label' => 'Weight',
                'disabled' => $disabled,
                'invalid_message' => "This value '{{ value }}' should be of type number."
            ])
            ->add('isInsured', CheckboxType::class, [
                'required' => false,
                'label' => 'Has Insurance? (Beta for demonstration only)',
                'disabled' => $disabled,
            ])
            ->add('isClimateNeutral', CheckboxType::class, [
                'required' => false,
                'label' => 'Is Climate Neutral? (Beta for demonstration only)',
                'disabled' => $disabled,
            ]);

        if ($battery->getId() === null) {
            $form
                ->add('state', ChoiceFieldMaskType::class, [
                    'choices' => [
                        'Registered' => 'registered',
                        'Delivered' => 'delivered'
                    ],
                    'data' => '',
                    'map' => [
                        'delivered' => ['deliveryDate'],
                    ],
                    'mapped' => false,
                    'required' => false,
                    'label' => 'Status',
                    'disabled' => $disabled,
                    'placeholder' => 'Select battery status',
                    'help' => '<i class="fa fa-info-circle mr-5"></i>The default state would be Pre-registered',
                    'help_html' => true,
                ])
                ->add('deliveryDate', DateTimeType::class, [
                    'mapped' => false,
                    'widget' => 'single_text',
                    'required' => true,
                    'disabled' => $disabled
                ]);
        }
    }

    /**
     * @param ListMapper $list
     */
    protected function configureListFields(ListMapper $list): void
    {
        parent::configureListFields($list); // TODO: Change the autogenerated
        $list
            ->addIdentifier('manufacturer.name')
            ->addIdentifier('serialNumber')
            ->addIdentifier('status')
            ->addIdentifier('batteryType.type', TextType::class, [
                'label' => 'Battery Type'
            ])
            ->addIdentifier('cellType')
            ->addIdentifier('moduleType')
            ->addIdentifier('productionDate', null, [
                'format' => 'Y-m-d'
            ])
            ->addIdentifier('trayNumber')
            ->addIdentifier('co2', TextType::class, [
                'label' => 'CO2'
            ])
            ->addIdentifier('nominalVoltage')
            ->addIdentifier('nominalCapacity')
            ->addIdentifier('nominalEnergy')
            ->addIdentifier('mass', TextType::class, [
                'label' => 'Weight'
            ]);
    }

    /**
     * @param DatagridMapper $filter
     */
    protected function configureDatagridFilters(DatagridMapper $filter): void
    {
        parent::configureDatagridFilters($filter); // TODO: Change the autogenerated stub
        $filter->add('serialNumber')
            ->add('status')
            ->add('created', DateTimeRangeFilter::class, [
                'field_type'=> DateRangePickerType::class,
                'field_options' => [
                    'field_options' => [
                        'format' => 'yyyy-MM-dd'
                    ]
                ]
            ]);
        $user = $this->tokenStorage->getToken()->getUser();

        if (in_array(RoleEnum::ROLE_SUPER_ADMIN, $user->getRoles(), true)
            || in_array(RoleEnum::ROLE_ADMIN, $user->getRoles(), true)) {
            $filter
                ->add('manufacturer.name');
        }
    }

    /**
     * @param ShowMapper $show
     */
    protected function configureShowFields(ShowMapper $show): void
    {
        parent::configureShowFields($show); // TODO: Change the autogenerated stub
        $show
            ->add('manufacturer.name')
            ->add('serialNumber')
            ->add('batteryType.type', TextType::class, [
                'label' => 'Battery Type'
            ])
            ->add('status', TextType::class, [
                'template' => 'battery/show_status_field.html.twig'
            ])
            ->add('cellType')
            ->add('moduleType')
            ->add('productionDate', null, [
                'format' => 'Y-m-d'
            ])
            ->add('trayNumber')
            ->add('co2', TextType::class, [
                'label' => 'CO2'
            ])
            ->add('nominalVoltage')
            ->add('nominalCapacity')
            ->add('nominalEnergy')
            ->add('height')
            ->add('width')
            ->add('length')
            ->add('mass', TextType::class, ['label' => 'Weight'])
            ->add('isInsured', null, ['label' => 'Has Insurance?'])
            ->add('isClimateNeutral', null, ['label' => 'Is Climate Neutral?']);
    }

    /**
     * @param ProxyQueryInterface $query
     * @return ProxyQueryInterface
     */
    protected function configureQuery(ProxyQueryInterface $query): ProxyQueryInterface
    {
        $query = parent::configureQuery($query);
        $user = $this->tokenStorage->getToken()->getUser();

        if (!in_array(RoleEnum::ROLE_SUPER_ADMIN, $user->getRoles(), true)
            && !in_array(RoleEnum::ROLE_ADMIN, $user->getRoles(), true)
            && in_array(RoleEnum::ROLE_MANUFACTURER, $user->getRoles(), true)) {
            $manufacturer = $user->getManufacturer();
            $rootAlias = current($query->getRootAliases());
            $query->andWhere(
                $query->expr()->eq($rootAlias . '.manufacturer', $manufacturer->getId())
            );
        }

        return $query;
    }
    /**
     * @param $tokenStorage
     */
    public function setTokenStorage($tokenStorage)
    {
        $this->tokenStorage = $tokenStorage;
    }

    /**
     * @param TransactionLogService $transactionLogService
     */
    public function setTransactionLogService(TransactionLogService $transactionLogService)
    {
        $this->transactionLogService = $transactionLogService;
    }

    /**
     * @param ShipmentService $shipmentService
     */
    public function setShipmentService(ShipmentService $shipmentService)
    {
        $this->shipmentService = $shipmentService;
    }

    /**
     * @param object $object
     */
    protected function prePersist(object $object): void
    {
        parent::prePersist($object); // TODO: Change the autogenerated stub

        $object->setUpdated(new \DateTime('now'));
        $user = $this->tokenStorage->getToken()->getUser();

        if ($object->getCreated() === null) {
            $object->setCreated(new \DateTime('now'));
        }

        if ((!in_array(RoleEnum::ROLE_SUPER_ADMIN, $user->getRoles(), true)
            && !in_array(RoleEnum::ROLE_ADMIN, $user->getRoles(), true)
            && in_array(RoleEnum::ROLE_MANUFACTURER, $user->getRoles(), true))) {
            $object->setManufacturer($user->getManufacturer());
        }

        $object->setStatus(CustomHelper::BATTERY_STATUS_PRE_REGISTERED);
        $object->setBlockchainSecured(false);
        $object->setCurrentPossessor($user);
    }

    protected function configureRoutes(RouteCollectionInterface $collection): void
    {
        $collection->add('import');
        $collection->add('detail');
        $collection->add('download');
        $collection->add('report');
        $collection->add('downloadReport');
        $collection->add('downloadReportAsPdf');
        $collection->add('getReport');
        $collection->add('scanQr');
        $collection->add('getScanResult');
        $collection->add('register');
        $collection->add('downloadBatchPdf');
        $collection->add('label');
        $collection->add('downloadLabel');
        $collection->add('getBatteryDetailsById');
    }

    /**
     * @param array $actions
     * @return array
     */
    protected function configureDashboardActions(array $actions): array
    {
        $actions['import'] = [
            'label' => 'Bulk Import',
            'translation_domain' => 'SonataAdminBundle',
            'url' => $this->generateUrl('import'),
            'icon' => 'fa fa-plus',
        ];
        $actions['detail'] = [
            'label' => 'Search Battery',
            'translation_domain' => 'SonataAdminBundle',
            'url' => $this->generateUrl('detail'),
            'icon' => 'fa fa-search',
        ];
        $actions['report'] = [
            'label' => 'Report View',
            'translation_domain' => 'SonataAdminBundle',
            'url' => $this->generateUrl('report'),
            'icon' => 'fa fa-info-circle',
        ];
        $actions['label'] = [
            'label' => 'Generate Label',
            'translation_domain' => 'SonataAdminBundle',
            'url' => $this->generateUrl('label'),
            'icon' => 'fa fa-tags',
        ];

        return $actions;
    }

    /**
     * @param array $actions
     * @return array
     */
    protected function configureBatchActions(array $actions): array
    {
        if (
            $this->hasRoute('edit') && $this->hasAccess('edit') &&
            $this->hasRoute('delete') && $this->hasAccess('delete')
        ) {
            $actions['register'] = [
                'ask_confirmation' => true,
                'controller' => 'app.controller.battery::batchRegisterAction',
                'template' => 'battery/ask_confirmation.html.twig'
            ];
            $actions['download'] = [
                'ask_confirmation' => false,
                'controller' => 'app.controller.battery::batchDownloadAction'
            ];
        }

        return $actions;
    }

    protected function postPersist(object $object): void
    {
        try {
            parent::postPersist($object); // TODO: Change the autogenerated stub
            $state = $this->getForm()->get('state')->getData();

            if (!empty($state) && $state === CustomHelper::BATTERY_STATUS_REGISTERED) {
                $object->setStatus(CustomHelper::BATTERY_STATUS_REGISTERED);
                /** @var Battery $object */
                $this->transactionLogService->createTransactionLog(
                    $object,
                    CustomHelper::BATTERY_STATUS_REGISTERED
                );
            } elseif (!empty($state) && $state === CustomHelper::BATTERY_STATUS_DELIVERED) {
                $deliveryDate = $this->getForm()->get('deliveryDate')->getData();
                $object->setStatus(CustomHelper::BATTERY_STATUS_DELIVERED);
                $object->setDeliveryDate($deliveryDate);
                /** @var Battery $object */
                $this->transactionLogService->createTransactionLog(
                    $object,
                    CustomHelper::BATTERY_STATUS_REGISTERED
                );
                /** @var Battery $object */
                $transactionLog = $this->transactionLogService->createDeliveryTransactionLog(
                    $object,
                    $object->getManufacturer()->getUser(),
                    null,
                    CustomHelper::BATTERY_STATUS_DELIVERED,
                    CustomHelper::STATUS_PENDING,
                    $deliveryDate
                );
                $this->shipmentService
                    ->createShipment(
                        $object->getManufacturer()->getUser(),
                        $object,
                        $transactionLog,
                        $deliveryDate
                    );
            }
        } catch (\Exception $exception) {
            echo $exception->getMessage();
        }
    }
}