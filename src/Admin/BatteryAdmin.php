<?php

namespace App\Admin;

use App\Entity\Battery;
use App\Enum\RoleEnum;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Datagrid\ProxyQueryInterface;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Route\RouteCollectionInterface;
use Sonata\AdminBundle\Show\ShowMapper;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\TextType;

/**
 * Class BatteryAdmin
 * @package App\Admin
 * @property $tokenStorage
 */
class BatteryAdmin extends AbstractAdmin
{
    protected function configureFormFields(FormMapper $form): void
    {
        parent::configureFormFields($form); // TODO: Change the autogenerated stub
        /** @var Battery $battery */
        $battery = $this->getSubject();
        $form
            ->add('serialNumber', TextType::class)
            ->add('batteryType', TextType::class)
            ->add('nominalVoltage', NumberType::class)
            ->add('nominalCapacity', NumberType::class)
            ->add('nominalEnergy', NumberType::class)
            ->add('cycleLife', NumberType::class)
            ->add('height', NumberType::class)
            ->add('width', NumberType::class)
            ->add('mass', NumberType::class);
    }

    /**
     * @param ListMapper $list
     */
    protected function configureListFields(ListMapper $list): void
    {
        parent::configureListFields($list); // TODO: Change the autogenerated
        $list
            ->addIdentifier('serialNumber')
            ->addIdentifier('batteryType')
            ->addIdentifier('nominalVoltage')
            ->addIdentifier('nominalCapacity')
            ->addIdentifier('nominalEnergy')
            ->addIdentifier('width')
            ->addIdentifier('height')
            ->addIdentifier('mass');
    }

    /**
     * @param DatagridMapper $filter
     */
    protected function configureDatagridFilters(DatagridMapper $filter): void
    {
        parent::configureDatagridFilters($filter); // TODO: Change the autogenerated stub
        $filter->add('serialNumber');
    }

    /**
     * @param ShowMapper $show
     */
    protected function configureShowFields(ShowMapper $show): void
    {
        parent::configureShowFields($show); // TODO: Change the autogenerated stub
        $show
            ->add('serialNumber')
            ->add('batteryType')
            ->add('nominalVoltage')
            ->add('nominalCapacity')
            ->add('nominalEnergy')
            ->add('height')
            ->add('width');
    }

    /**
     * @param ProxyQueryInterface $query
     * @return ProxyQueryInterface
     */
    protected function configureQuery(ProxyQueryInterface $query): ProxyQueryInterface
    {
        $query = parent::configureQuery($query);
        $user = $this->tokenStorage->getToken()->getUser();

        if (!in_array(RoleEnum::ROLE_SUPER_ADMIN, $user->getRoles(), true)
            && in_array(RoleEnum::ROLE_MANUFACTURER, $user->getRoles(), true)) {
            $manufacturer = $user->getManufacturer();
            $rootAlias = current($query->getRootAliases());
            $query->andWhere(
                $query->expr()->eq($rootAlias . '.manufacturer', $manufacturer->getId())
            );
        }

        return $query;
    }
    /**
     * @param $tokenStorage
     */
    public function setTokenStorage($tokenStorage)
    {
        $this->tokenStorage = $tokenStorage;
    }

    /**
     * @param object $object
     */
    protected function prePersist(object $object): void
    {
        parent::prePersist($object); // TODO: Change the autogenerated stub

        $object->setUpdated(new \DateTime('now'));
        $user = $this->tokenStorage->getToken()->getUser();

        if ($object->getCreated() === null) {
            $object->setCreated(new \DateTime('now'));
        }

        if (!in_array(RoleEnum::ROLE_SUPER_ADMIN, $user->getRoles(), true)
        && in_array(RoleEnum::ROLE_MANUFACTURER, $user->getRoles(), true)) {
            $object->setManufacturer($user->getManufacturer());
            $object->setCurrentOwner($user->getId());
        }
    }

    protected function configureRoutes(RouteCollectionInterface $collection): void
    {
        $collection->add('import');
    }

    /**
     * @param array $actions
     * @return array
     */
    protected function configureDashboardActions(array $actions): array
    {
        $actions['import'] = [
            'label' => 'bulk_import',
            'translation_domain' => 'SonataAdminBundle',
            'url' => $this->generateUrl('import'),
            'icon' => 'fa fa-plus',
        ];

        return $actions;
    }
}