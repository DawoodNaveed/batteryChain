<?php

namespace App\Admin;

use App\Entity\Distributor;
use App\Enum\RoleEnum;
use Doctrine\ORM\Query\Expr\Join;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Datagrid\ProxyQueryInterface;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Form\Type\AdminType;
use Sonata\AdminBundle\Show\ShowMapper;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\TextType;

/**
 * Class DistributorAdmin
 * @package App\Admin
 * @property $passwordEncoder
 * @property $tokenStorage
 */
class DistributorAdmin extends AbstractAdmin
{
    protected function configureFormFields(FormMapper $form): void
    {
        parent::configureFormFields($form); // TODO: Change the autogenerated stub
        /** @var Distributor $distributor */
        $distributor = $this->getSubject();
        $form
            ->add('name', TextType::class);

        if ($distributor->getId() === null) {
            $form
                ->add('user', AdminType::class);
        } else {
            $form
                ->add('address', TextType::class)
                ->add('country', TextType::class)
                ->add('city', TextType::class)
                ->add('contact', TextType::class);
        }
    }

    /**
     * @param ListMapper $list
     */
    protected function configureListFields(ListMapper $list): void
    {
        parent::configureListFields($list); // TODO: Change the autogenerated
        $list
            ->addIdentifier('name')
            ->addIdentifier('address')
            ->addIdentifier('city')
            ->addIdentifier('country');
    }

    /**
     * @param DatagridMapper $filter
     */
    protected function configureDatagridFilters(DatagridMapper $filter): void
    {
        parent::configureDatagridFilters($filter); // TODO: Change the autogenerated stub
        $filter->add('name');
    }

    /**
     * @param ShowMapper $show
     */
    protected function configureShowFields(ShowMapper $show): void
    {
        parent::configureShowFields($show); // TODO: Change the autogenerated stub
        $show
            ->add('name')
            ->add('user.email', EmailType::class, [
                'label' => 'Email'
            ])
            ->add('address')
            ->add('city')
            ->add('country')
            ->add('contact');
    }

    protected function configureQuery(ProxyQueryInterface $query): ProxyQueryInterface
    {
        $query = parent::configureQuery($query);
        $user = $this->tokenStorage->getToken()->getUser();

        if (!in_array(RoleEnum::ROLE_SUPER_ADMIN, $user->getRoles(), true)) {
            $manufacturer = $user->getManufacturer();
            $rootAlias = current($query->getRootAliases());
            $query->join($rootAlias . '.manufacturers', 'm', Join::WITH,
                $query->expr()->eq('m.id', $manufacturer->getId()));
        }

        return $query;
    }

    /**
     * @param $passwordEncoder
     */
    public function setPasswordEncoder($passwordEncoder)
    {
        $this->passwordEncoder = $passwordEncoder;
    }

    /**
     * @param $tokenStorage
     */
    public function setTokenStorage($tokenStorage)
    {
        $this->tokenStorage = $tokenStorage;
    }

    /**
     * @param object $object
     */
    protected function prePersist(object $object): void
    {
        parent::prePersist($object); // TODO: Change the autogenerated stub

        $object->setUpdated(new \DateTime('now'));
        $user = $this->tokenStorage->getToken()->getUser();

        if ($object->getCreated() === null) {
            $object->setCreated(new \DateTime('now'));
        }

        $plainPassword = $object->getUser()->getPassword();
        $encoded = $this->passwordEncoder->hashPassword($object->getUser(), $plainPassword);

        $object->getUser()->setPassword($encoded);
        $object->getUser()->setRoles([RoleEnum::ROLE_DISTRIBUTOR]);

        if (!in_array(RoleEnum::ROLE_SUPER_ADMIN, $user->getRoles(), true)) {
            $object->addManufacturer($user->getManufacturer());
        }
    }
}