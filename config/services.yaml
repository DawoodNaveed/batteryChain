# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.path.manufacturer_logos: /resources/uploads/logos
    app.path.co2_icons: /resources/uploads/icons/co2
    app.path.insurance_icons: /resources/uploads/icons/insurance
    app.path.no_image: /resources/icons/no-image.png
    app.path.manufacturer_aws_logos: upload/logos/
    app.path.co2_aws_icons: upload/logos/co2/
    app.path.insurance_aws_icons: upload/logos/insurance/

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $csvFileUploadSize: '%env(CSV_FILE_UPLOAD_SIZE)%'
            $recaptchaSecretKey: '%env(GOOGLE_RECAPTCHA_SECRET_KEY)%'
            $kernelProjectDir: '%kernel.project_dir%'
            $mailjetKey: '%env(MAILJET_KEY)%'
            $mailjetSecret: '%env(MAILJET_SECRET)%'
            $mailjetFromName: '%env(MAILJET_FROM_NAME)%'
            $mailjetFromEmail: '%env(MAILJET_FROM_EMAIL)%'
            $blockchainUrl: '%env(BLOCKCHAIN_URL)%'
            $blockchainAccessCode: '%env(BLOCKCHAIN_ACCESS_CODE)%'
            $openssl_cipher: '%env(OPENSSL_CIPHER)%'
            $openssl_iv: '%env(OPENSSL_IV)%'
            $openssl_password: '%env(OPENSSL_PASSWORD)%'
            $availableLocales: '%env(APP_LOCALES)%'
            $awsBucket: '%env(AWS_BUCKET)%'
            $awsLogoFolder: '%app.path.manufacturer_aws_logos%'
            $awsCo2Folder: '%app.path.co2_aws_icons%'
            $awsInsuranceFolder: '%app.path.insurance_aws_icons%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~]
        calls:
            - [ setRoles, [ "%security.role_hierarchy.roles%" ] ]
            - [ setPasswordEncoder, [ '@security.password_hasher' ] ]
            - [ setManufacturerService, [ '@App\Service\ManufacturerService' ] ]
            - [ setTokenStorage, [ '@security.token_storage' ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: User, show_in_dashboard: true, group: User }

    admin.manufacturer:
        class: App\Admin\ManufacturerAdmin
        arguments: [~, App\Entity\Manufacturer, ~]
        calls:
            - [ setPasswordEncoder, [ '@security.password_hasher' ] ]
            - [ setTemplate, [ 'edit', 'manufacturer/edit.html.twig' ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Manufacturer, group: Manufacturer }

    admin.recycler:
        class: App\Admin\RecyclerAdmin
        arguments: [~, App\Entity\Recycler, App\Controller\RecyclerController]
        calls:
            - [ setPasswordEncoder, [ '@security.password_hasher' ] ]
            - [ setTokenStorage, [ '@security.token_storage' ] ]
            - [ setTemplate, [ 'layout', 'recycler/list.html.twig' ] ]
            - [ setManufacturerService, [ '@App\Service\ManufacturerService' ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: "Pickup Partner and Recycler", group: "Pickup Partner and Recycler" }

    admin.battery:
        class: App\Admin\BatteryAdmin
        arguments: [~, App\Entity\Battery, App\Controller\BatteryController]
        calls:
            - [ setTokenStorage, [ '@security.token_storage' ] ]
            - [ setTransactionLogService, [ '@App\Service\TransactionLogService' ] ]
            - [ setShipmentService, [ '@App\Service\ShipmentService' ] ]
            - [ setTemplate, [ 'layout', 'battery/list.html.twig' ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Battery, group: Battery }

    admin.battery.filtered:
        class: App\Admin\BatteryFilteredAdmin
        arguments: [~, App\Entity\Battery, App\Controller\BatteryController]
        calls:
            - [ setTokenStorage, [ '@security.token_storage' ] ]
            - [ setTransactionLogService, [ '@App\Service\TransactionLogService' ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: BatteryFiltered, group: BatteryFiltered }

    admin.return:
        class: App\Admin\BatteryReturnAdmin
        arguments: [~, App\Entity\BatteryReturn, App\Controller\ReturnController]
        calls:
            - [ setTokenStorage, [ '@security.token_storage' ] ]
            - [ setTemplate, [ 'layout', 'return/list.html.twig' ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Returns, group: Return }

    admin.transaction:
        class: App\Admin\TransactionAdmin
        arguments: [~, App\Entity\TransactionLog, App\Controller\TransactionController]
        calls:
            - [ setTokenStorage, [ '@security.token_storage' ] ]
            - [ setTemplate, [ 'layout', 'return/list.html.twig' ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: "Return/Recycle", group: "Return/Recycle" }

    admin.country:
        class: App\Admin\CountryAdmin
        arguments: [~, App\Entity\Country, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Country, group: Country }

    admin.battery.type:
        class: App\Admin\BatteryTypeAdmin
        arguments: [~, App\Entity\BatteryType, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: BatteryType, group: BatteryType }

    admin.shipment:
        class: App\Admin\ShipmentAdmin
        arguments: [~, App\Entity\Shipment, App\Controller\ShipmentController]
        calls:
            - [ setTokenStorage, [ '@security.token_storage' ] ]
            - [ setTemplate, [ 'layout', 'delivery/list.html.twig' ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Delivery, group: Delivery }
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    gedmo.listener.softdeleteable:
        class: Gedmo\SoftDeleteable\SoftDeleteableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ '@annotation_reader' ] ]

    App\Service\AwsService:
        arguments:
            - '@bc.aws_s3.client'

    bc.aws_s3.client:
        class: Aws\S3\S3Client
        factory: [Aws\S3\S3Client, 'factory']
        arguments:
            -
                version: 'latest'
                region: '%env(AWS_REGION)%'
knp_gaufrette:
    adapters:
        logo_adapter:
            aws_s3:
                service_id: 'bc.aws_s3.client'
                bucket_name: '%env(AWS_BUCKET)%'
                detect_content_type: true
                options:
                    directory: 'upload/logos'
                    create: true
        logo_co2_adapter:
            aws_s3:
                service_id: 'bc.aws_s3.client'
                bucket_name: '%env(AWS_BUCKET)%'
                detect_content_type: true
                options:
                    directory: 'upload/logos/co2'
                    create: true
        logo_insurance_adapter:
            aws_s3:
                service_id: 'bc.aws_s3.client'
                bucket_name: '%env(AWS_BUCKET)%'
                detect_content_type: true
                options:
                    directory: 'upload/logos/insurance'
                    create: true

    filesystems:
        logos:
            adapter: logo_adapter
        logos_co2:
            adapter: logo_co2_adapter
        logos_insurance:
            adapter: logo_insurance_adapter
    stream_wrapper: ~